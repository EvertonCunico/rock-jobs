package com.rockjobs.features.cliente;import com.ordnaelmedeiros.jpafluidselect.querybuilder.select.pagination.PaginationResult;import com.rockjobs.Dados;import com.rockjobs.core.pesquisa_base_old.RequestPesquisa;import com.rockjobs.core.queryMapper.QueryMapper;import com.rockjobs.core.usuario.dto.UsuarioPesquisaDTO;import com.rockjobs.core.util.Regex;import com.rockjobs.core.util.StringUtil;import com.rockjobs.features.cliente.dto.ClientePesquisaDTO;import org.hibernate.Session;import javax.enterprise.context.RequestScoped;import javax.inject.Inject;import javax.persistence.EntityManager;import javax.persistence.Query;import java.util.List;@RequestScopedpublic class ClientePesquisaService {    @Inject    EntityManager em;    private static final String SQL =            "select " +            "<<campos>>" +            " from " +            "cliente t " +            "<<joins>> " +            "where (true) ";    private static final String CAMPOS_PESQUISA =            "t.id," +            "t.razao_social," +            "t.email," +            "t.cnpj," +            "t.telefone ";    private static final String JOINS = "";    public PaginationResult<ClientePesquisaDTO> listar(RequestPesquisa requestPesquisa) throws Exception {        //Faz o count dos registros        var sql = SQL;        sql = adicionaFiltrosPesquisa(requestPesquisa, sql);        sql = sql.replace("<<campos>>", "count(*) ");        sql = sql.replace("<<joins>>", JOINS);        Long count = Long.valueOf(this.em.unwrap(Session.class).createSQLQuery(sql).getSingleResult().toString());        //Busca registros        sql = SQL;        sql = sql.replace("<<campos>>", CAMPOS_PESQUISA);        sql = sql.replace("<<joins>>", JOINS);        sql = adicionaFiltrosPesquisa(requestPesquisa, sql);        sql = sql + " order by id ";        if (requestPesquisa.getPagina() > -1) {            sql = sql + "limit 50 " + (requestPesquisa.getPagina() > 1 ? "offset " + (requestPesquisa.getPagina() - 1) * 50 : "");        }        Query q = this.em.createNativeQuery(sql);        List<ClientePesquisaDTO> result = QueryMapper.getListDTO(q, ClientePesquisaDTO.class);        return Dados.geraLista(result, requestPesquisa.getPagina(), count);    }    private String adicionaFiltrosPesquisa(RequestPesquisa requestPesquisa, String sql) {        if (StringUtil.isNotEmpty(requestPesquisa.getValorPesquisa())) {            sql = sql + " and (t.razao_social ilike '%" + requestPesquisa.getValorPesquisa() + "%' or t.nome_fantasia ilike '%" + requestPesquisa.getValorPesquisa() + "%')";        }        if (requestPesquisa.getFiltrosPersonalizados() != null && requestPesquisa.getFiltrosPersonalizados().isEmpty()) {            if (requestPesquisa.getFiltrosPersonalizados().containsKey("email")) {                sql = sql + " and t.email ilike '%" + requestPesquisa.getFiltrosPersonalizados().get("email") + "%'";            }            if (requestPesquisa.getFiltrosPersonalizados().containsKey("telefone")) {                sql = sql + " and t.telefone ilike '%" +                        requestPesquisa.getFiltrosPersonalizados().get("telefone").toString().replace(Regex.DIGITO_SEM_MASCARA, "") + "%'";            }            if (requestPesquisa.getFiltrosPersonalizados().containsKey("cnpj")) {                sql = sql + " and t.cnpj ilike '%" +                        requestPesquisa.getFiltrosPersonalizados().get("cnpj").toString().replace(Regex.DIGITO_SEM_MASCARA, "") + "%'";            }        }        return sql;    }}