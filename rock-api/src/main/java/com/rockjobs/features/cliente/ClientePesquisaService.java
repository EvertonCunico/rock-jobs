package com.rockjobs.features.cliente;import com.ordnaelmedeiros.jpafluidselect.querybuilder.select.pagination.PaginationResult;import com.rockjobs.Dados;import com.rockjobs.core.pesquisa_base_old.RequestPesquisa;import com.rockjobs.core.security.service.Logado;import com.rockjobs.core.usuario.TipoAcesso;import com.rockjobs.core.util.Regex;import com.rockjobs.core.util.StringUtil;import org.hibernate.Session;import javax.enterprise.context.RequestScoped;import javax.inject.Inject;import javax.persistence.EntityManager;import java.util.List;@RequestScopedpublic class ClientePesquisaService {    @Inject    EntityManager em;    @Inject    Logado logado;    private static final String SQL =            "select " +            "<<campos>>" +            " from " +            "cliente t " +            "<<joins>> " +            "where (true) ";    private static final String CAMPOS_PESQUISA =            "t.id," +            "t.razao_social," +            "t.nome_fantasia," +            "t.endereco," +            "t.endereco_numero," +            "t.endereco_bairro," +            "t.endereco_cep," +            "t.email," +            "t.cnpj," +            "t.telefone ";    private static final String JOINS = "";    public PaginationResult<Cliente> listar(RequestPesquisa requestPesquisa) throws Exception {        //Faz o count dos registros        var sql = SQL;        sql = adicionaFiltrosPesquisa(requestPesquisa, sql);        sql = sql.replace("<<campos>>", "count(*) ");        sql = sql.replace("<<joins>>", JOINS);        Long count = Long.valueOf(this.em.unwrap(Session.class).createSQLQuery(sql).getSingleResult().toString());        //Busca registros        sql = SQL;        sql = sql.replace("<<campos>>", "t.*");        sql = sql.replace("<<joins>>", JOINS);        sql = adicionaFiltrosPesquisa(requestPesquisa, sql);        sql = sql + " order by id ";        if (requestPesquisa.getPagina() > -1) {            sql = sql + "limit 50 " + (requestPesquisa.getPagina() > 1 ? "offset " + (requestPesquisa.getPagina() - 1) * 50 : "");        }        List<Cliente> result = this.em.unwrap(Session.class).createSQLQuery(sql).addEntity(Cliente.class).getResultList();        return Dados.geraLista(result, requestPesquisa.getPagina(), count);    }    private String adicionaFiltrosPesquisa(RequestPesquisa requestPesquisa, String sql) {        if (!TipoAcesso.ADMIN_GERAL.equals(logado.getUsuario().getTipoAcesso()) && logado.getUsuario().getCliente() != null) {            sql += " and (t.id = " + logado.getUsuario().getCliente().getId() + ")";        }        if (StringUtil.isNotEmpty(requestPesquisa.getValor())) {            sql = sql + " and (t.razao_social ilike '%" + requestPesquisa.getValor() + "%' or t.nome_fantasia ilike '%" + requestPesquisa.getValor() + "%')";        }        if (requestPesquisa.getFiltrosPersonalizados() != null && !requestPesquisa.getFiltrosPersonalizados().isEmpty()) {            if (requestPesquisa.getFiltrosPersonalizados().containsKey("email") && StringUtil.isNotEmpty(requestPesquisa.getFiltrosPersonalizados().get("email"))) {                sql = sql + " and t.email ilike '%" + requestPesquisa.getFiltrosPersonalizados().get("email") + "%'";            }            if (requestPesquisa.getFiltrosPersonalizados().containsKey("telefone") && StringUtil.isNotEmpty(requestPesquisa.getFiltrosPersonalizados().get("telefone"))) {                sql = sql + " and t.telefone ilike '%" +                        requestPesquisa.getFiltrosPersonalizados().get("telefone").toString().replaceAll(Regex.DIGITO_SEM_MASCARA, "") + "%'";            }            if (requestPesquisa.getFiltrosPersonalizados().containsKey("cnpj") && StringUtil.isNotEmpty(requestPesquisa.getFiltrosPersonalizados().get("cnpj"))) {                sql = sql + " and t.cnpj ilike '%" +                        requestPesquisa.getFiltrosPersonalizados().get("cnpj").toString().replaceAll(Regex.DIGITO_SEM_MASCARA, "") + "%'";            }        }        return sql;    }}