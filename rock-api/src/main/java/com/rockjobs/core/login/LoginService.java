package com.rockjobs.core.login;import com.rockjobs.core.email.EmailController;import com.rockjobs.core.exceptions.ValidacaoException;import com.rockjobs.core.login.model.LoginArgs;import com.rockjobs.core.login.model.LoginInfo;import com.rockjobs.core.login.model.RecuperarSenha;import com.rockjobs.core.security.PasswordUtil;import com.rockjobs.core.security.service.Logado;import com.rockjobs.core.security.service.SecurityService;import com.rockjobs.core.usuario.Usuario;import com.rockjobs.core.usuario.UsuarioService;import com.rockjobs.core.usuario.dto.UsuarioDto;import com.rockjobs.core.util.StringUtil;import javax.enterprise.context.ApplicationScoped;import javax.inject.Inject;import javax.transaction.Transactional;import java.time.LocalDateTime;import java.util.UUID;@ApplicationScopedpublic class LoginService {    @Inject    Logado logado;    @Inject    UsuarioService usuarioService;    @Inject    EmailController emailController;    @Transactional    public LoginInfo autenticar(LoginArgs loginInfo) throws Exception {        if (StringUtil.isEmpty(loginInfo.getLogin()) || StringUtil.isEmpty(loginInfo.getSenha())) {            throw ValidacaoException.builder().status(401).mensagem("Usuário ou senha incorretos.").build();        }        var usuario = Usuario.findByEmailAndAtivo(loginInfo.getLogin());        LoginInfo result = new LoginInfo();        if (usuario != null && PasswordUtil.verifyPassword(loginInfo.getSenha(), usuario.getSenha())) {            result.setUsuario(new UsuarioDto(usuario));            //result.setToken(TokenUtils.generateToken());            result.setToken(UUID.randomUUID().toString());            logado.setToken(SecurityService.addToken(usuario, result.getToken()));            result.setTokenExpiration(logado.getToken().getExpiration());            return result;        }        throw ValidacaoException.builder().status(401).mensagem("Usuário ou senha incorretos.").build();    }    @Transactional    public void recuperarSenha(RecuperarSenha recuperarSenha) throws ValidacaoException {        try {            var usuario = Usuario.buscarPeloCpfEmailDataAtivo(recuperarSenha.getEmail(), recuperarSenha.getCpf(), recuperarSenha.getDataNascimento());            if (usuario == null) throw ValidacaoException.builder().status(400).mensagem("Dados não encontrados. Verifique os campos").build();            var senha = PasswordUtil.gerar();            usuario.setSenha(PasswordUtil.encryptPassword(senha));            usuarioService.alterar(usuario);            emailController.recuperarSenha(usuario, senha);        } catch (Exception e) {            throw ValidacaoException.builder().status(400).mensagem("Dados não encontrados. Verifique os campos").build();        }    }}