package com.bume.core.pesquisa_base;import com.bume.core.enums.SimNao;import org.joda.time.DateTime;import java.math.BigDecimal;import java.math.BigInteger;import java.sql.Date;import java.sql.Timestamp;import java.time.LocalDate;import java.time.LocalDateTime;public class CastUtil {	public static Integer getInteger(Object tuple) {		if (tuple != null) {			if (tuple instanceof Long)				return Integer.valueOf(String.valueOf(tuple));			else if (tuple instanceof Integer)				return (Integer) tuple;			else if (tuple instanceof BigDecimal)				return ((BigDecimal) tuple).intValue();		}		return 0;	}	public static Boolean getBoolean(Object tuple) {		if (tuple != null) {			if (tuple instanceof Boolean)				return Boolean.valueOf(String.valueOf(tuple));			else				return false;		}		return false;	}	public static Double getDouble(Object object) {		if (object != null) {			if (object instanceof Long)				return Double.valueOf(String.valueOf(object));			else if (object instanceof Double)				return (Double) object;			else if (object instanceof BigDecimal)				return ((BigDecimal) object).doubleValue();		}		return 0D;	}	public static Long getLong(Object object) {		if (object != null) {			if (object instanceof Long)				return (Long) object;			else if (object instanceof Integer)				return ((Integer) object).longValue();			else if (object instanceof BigDecimal)				return ((BigDecimal) object).longValue();			else if (object instanceof BigInteger)				return ((BigInteger) object).longValue();		}		return 0L;	}	public static BigDecimal getBigDecimal(Object object) {		if (object != null) {			if (object instanceof BigDecimal)				return (BigDecimal) object;			else if (object instanceof Double)				return BigDecimal.valueOf((Double) object);			else if (object instanceof String)				return new BigDecimal(String.valueOf(object));			else if (object instanceof Integer)				return new BigDecimal((Integer) object);			else if (object instanceof BigInteger)				return BigDecimal.valueOf(((BigInteger) object).longValue());		}		return new BigDecimal(BigInteger.ZERO);	}	public static String getString(Object object) {		if (object != null) {			return object.toString();		}		return null;	}	public static Date getDate(Object object) {		if (object != null) {			try {				return Date.valueOf(String.valueOf(object));			} catch (Exception ignored) {			}			return null;		}		return null;	}	public static LocalDate getLocalDate(Object object) {		if (object != null) {			try {				return LocalDate.parse(String.valueOf(object));			} catch (Exception ignored) {			}			return null;		}		return null;	}	public static DateTime getDateTime(Object object) {		if (object != null) {			try {				return DateTime.parse(String.valueOf(object));			} catch (Exception e) {				try {					Timestamp t = Timestamp.valueOf(object.toString());					return new DateTime(t.getTime());				} catch (Exception ignored) {					return null;				}			}		}		return null;	}	public static LocalDateTime getLocalDateTime(Object object) {		if (object != null) {			try {				return LocalDateTime.parse(String.valueOf(object));			} catch (Exception e) {				try {					Timestamp t = Timestamp.valueOf(object.toString());					return t.toLocalDateTime();				} catch (Exception ignored) {					return null;				}			}		}		return null;	}	public static SimNao getSimNao(Object object) {		if (object != null) {			try {				return SimNao.valueOf(String.valueOf(object));			} catch (Exception ignored) {			}			return SimNao.N;		}		return null;	}}