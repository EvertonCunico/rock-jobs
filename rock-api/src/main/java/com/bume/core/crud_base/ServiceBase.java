package com.bume.core.crud_base;import com.bume.core.crud_base.validations.AcaoCrud;import com.bume.core.crud_base.validations.EventoPadrao;import com.bume.core.crud_base.validations.ValidacaoPadrao;import com.bume.core.exceptions.ValidacaoException;import io.quarkus.hibernate.orm.panache.PanacheEntityBase;import javax.enterprise.context.ApplicationScoped;import javax.enterprise.inject.spi.CDI;import java.util.List;@ApplicationScopedpublic interface ServiceBase<T extends PanacheEntityBase, E> {    List<Class<? extends ValidacaoPadrao<T>>> validacoes();    List<Class<? extends EventoPadrao<T>>> eventosExecutarAntes();    List<Class<? extends EventoPadrao<T>>> eventosExecutarDepois();    default void preOperacao(AcaoCrud acaoCrud, T entity) throws Exception {        if (entity == null) {            throw ValidacaoException.builder().status(404).mensagem("O registro n√£o foi encontrado.").build();        }        if (eventosExecutarAntes() != null) {            for (Class<? extends EventoPadrao<T>> evento: eventosExecutarAntes()) {                EventoPadrao<T> eventoInstance = CDI.current().select( evento ).get();                eventoInstance.executar(acaoCrud, entity);            }        }        if (validacoes() != null) {            for (Class<? extends ValidacaoPadrao<T>> classeValidacao: validacoes()) {                ValidacaoPadrao<T> validacaoInstance = CDI.current().select( classeValidacao ).get();                validacaoInstance.validar(acaoCrud, entity);            }        }    }    default void posOperacao(AcaoCrud acaoCrud, T entity) throws Exception {        if (eventosExecutarDepois() != null) {            for (Class<? extends EventoPadrao<T>> evento: eventosExecutarDepois()) {                EventoPadrao<T> eventoInstance = CDI.current().select( evento ).get();                eventoInstance.executar(acaoCrud, entity);            }        }    }    T novo(T t) throws Exception;    T alterar(T t) throws Exception;    void deletar(E id) throws Exception;    T buscarPorId(E id) throws Exception;    List<T> buscarTodos() throws Exception;}